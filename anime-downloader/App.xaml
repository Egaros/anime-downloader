<Application x:Class="anime_downloader.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:animeDownloader="clr-namespace:anime_downloader"
             xmlns:components="clr-namespace:anime_downloader.Views.Components"
             xmlns:viewModelComponents="clr-namespace:anime_downloader.ViewModels.Components"
             xmlns:viewModels="clr-namespace:anime_downloader.ViewModels"
             xmlns:views="clr-namespace:anime_downloader.Views"
             xmlns:xaml="clr-namespace:anime_downloader.Classes.Xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <xaml:StringJoinConverter x:Key="Converter" />
        <xaml:NotConverter x:Key="NotConverter" />
        <xaml:BooleanVisibilityConverter x:Key="VisibilityConverter" />
        <xaml:BooleanSymbolConverter x:Key="BooleanSymbolConverter" />
        <xaml:BooleanColorConverter x:Key="BooleanColorConverter" />
        <xaml:BooleanOpacityConverterNot x:Key="BooleanOpacityConverterNot" />
        <xaml:BooleanOpacityConverter x:Key="BooleanOpacityConverter" />
        <animeDownloader:StringEqualsConverter x:Key="StringEqualsConverter" />

        <!--  Views  -->

        <DataTemplate DataType="{x:Type viewModels:HomeViewModel}">
            <views:Home DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:DownloadViewModel}">
            <views:Download DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:ManageViewModel}">
            <views:Manage DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:MiscViewModel}">
            <views:Misc DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:PlaylistCreatorViewModel}">
            <views:PlaylistCreator DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:SettingsViewModel}">
            <views:Settings DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:WebViewModel}">
            <views:Web DataContext="{Binding}" />
        </DataTemplate>

        <!--  Components  -->

        <DataTemplate DataType="{x:Type viewModels:AnimeDetailsViewModel}">
            <views:AnimeDetails DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:AnimeDetailsMultipleViewModel}">
            <views:AnimeDetailsMultiple DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:AnimeListViewModel}">
            <views:AnimeList DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModelComponents:DownloaderViewModel}">
            <components:Downloader DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModelComponents:DownloadOptionsViewModel}">
            <components:DownloadOptions DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModelComponents:DownloadLogViewModel}">
            <components:DownloadLog DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModelComponents:FileListViewModel}">
            <components:FileList DataContext="{Binding}" />
        </DataTemplate>

        <!--  Storyboard  -->

        <Storyboard x:Key="DisplayTransition">
            <DoubleAnimation Duration="0:0:0.25"
                             From="0.0"
                             Storyboard.TargetProperty="Opacity"
                             To="1.0" />
        </Storyboard>

        <!--  Brush Colors  -->

        <SolidColorBrush x:Key="BackgroundColor" Color="#CAD6F3" />
        <SolidColorBrush x:Key="MouseOverColor" Color="#A2B9F0" />
        <SolidColorBrush x:Key="SelectedColor" Color="#2e51a2" />
        <SolidColorBrush x:Key="PressedDownColor" Color="#2047A1" />
        <SolidColorBrush x:Key="BorderColor" Color="#A1CAFF" />

        <!--  Disabled Brush Colors  -->

        <SolidColorBrush x:Key="DisabledBorderColor" Color="#F3F3F3" />
        <SolidColorBrush x:Key="DisabledBackgroundColor" Color="#EBEDF3" />
        <SolidColorBrush x:Key="DisabledForegroundColor" Color="LightSlateGray" />

        <!--  Special Brush Colors  -->

        <SolidColorBrush x:Key="SpecialBackgroundColor" Color="#10D910" />
        <SolidColorBrush x:Key="SpecialMouseOverColor" Color="#18B618" />
        <SolidColorBrush x:Key="SpecialSelectedColor" Color="#139E13" />
        <SolidColorBrush x:Key="SpecialPressedDownColor" Color="#0B8E0B" />
        <SolidColorBrush x:Key="SpecialBorderColor" Color="#2CF12C" />

        <!--  Disabled Brush Colors  -->

        <SolidColorBrush x:Key="SpecialDisabledBorderColor" Color="#94D994" />
        <SolidColorBrush x:Key="SpecialDisabledBackgroundColor" Color="#7EF17E" />
        <SolidColorBrush x:Key="SpecialDisabledForegroundColor" Color="LightSlateGray" />

        <!--  Fonts  -->

        <FontFamily x:Key="LargeButtonFont">Segoe UI Light</FontFamily>
        <FontFamily x:Key="MediumButtonFont">Segoe WP SemiLight</FontFamily>
        <FontFamily x:Key="MainFont">Yu Gothic UI Semilight</FontFamily>

        <!--  Button Styles  -->

        <Style TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource BorderColor}"
                                BorderThickness="0">
                            <ContentPresenter Margin="5" HorizontalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Border.Opacity" Value="0.75" />
                                <Setter Property="Border.Background" Value="{StaticResource DisabledBackgroundColor}" />
                                <Setter Property="Border.BorderBrush" Value="{StaticResource DisabledBorderColor}" />
                                <Setter Property="Background" Value="{StaticResource DisabledBackgroundColor}" />
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundColor}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{StaticResource BackgroundColor}" />
            <Setter Property="FontFamily" Value="{StaticResource MediumButtonFont}" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Width" Value="auto" />
            <Setter Property="Height" Value="auto" />
            <Setter Property="Foreground" Value="Black" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="Background" Value="{StaticResource MouseOverColor}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource PressedDownColor}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="LargeButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Border.Opacity" Value="0.75" />
                                <Setter Property="Border.Background" Value="{StaticResource DisabledBackgroundColor}" />
                                <Setter Property="Border.BorderBrush" Value="{StaticResource DisabledBorderColor}" />
                                <Setter Property="Background" Value="{StaticResource DisabledBackgroundColor}" />
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundColor}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Background" Value="{StaticResource BackgroundColor}" />
            <Setter Property="FontFamily" Value="{StaticResource LargeButtonFont}" />
            <Setter Property="FontSize" Value="28" />
            <Setter Property="FontWeight" Value="12" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="BorderBrush" Value="{x:Null}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Foreground" Value="Black" />
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="Background" Value="{StaticResource SelectedColor}" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                        <Condition Property="IsChecked" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="Background" Value="{StaticResource MouseOverColor}" />
                </MultiTrigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource PressedDownColor}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SpecialButton"
               BasedOn="{StaticResource {x:Type Button}}"
               TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource SpecialBorderColor}"
                                BorderThickness="0">
                            <ContentPresenter Margin="5"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Border.Opacity" Value="0.75" />
                                <Setter Property="Border.Background" Value="{StaticResource SpecialDisabledBackgroundColor}" />
                                <Setter Property="Background" Value="{StaticResource SpecialDisabledBackgroundColor}" />
                                <Setter Property="Border.BorderBrush" Value="{StaticResource DisabledBorderColor}" />
                                <Setter Property="Foreground" Value="{StaticResource SpecialDisabledForegroundColor}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{StaticResource SpecialBackgroundColor}" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="White" />
                    <Setter Property="Background" Value="{StaticResource SpecialMouseOverColor}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource SpecialPressedDownColor}" />
                </Trigger>
            </Style.Triggers>
        </Style>

    </Application.Resources>
</Application>